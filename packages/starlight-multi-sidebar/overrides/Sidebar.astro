---
import type { Props } from "@astrojs/starlight/props";
import Default from "@astrojs/starlight/components/Sidebar.astro";
import { AstroError } from "astro/errors";
import { Icon } from "@astrojs/starlight/components";

// Styles and CSS logic derived from https://daisyui.com/components/collapse/

// This Sidebar override uses the top-level items from the Starlight sidebar config to create sidebars.

// Go through each top-level sidebar item from the Astro config to...
// 1. Validate the config is set up correctly
// 2. Create a new derived set of `Astro.props` that only contains one set of sidebar entries
// 3. Check if the current page being rendered is current page to determine if this sidebar group should be selected
const multiSidebarConfig: [string, boolean, Props][] = Astro.props.sidebar.map(
  (entry) => {
    if (entry.type !== "group") {
      throw new AstroError(
        `\`${entry.label}\` cannot be used with multiple Starlight sidebars.

  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.

  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups`
      );
    }

    // Recursively check if a group of sidebar entries contains the current page
    const findIfIsCurrent = (
      entry: (typeof Astro.props.sidebar)[number]
    ): boolean => {
      if (entry.type === "link") {
        return entry.isCurrent;
      }
      return entry.entries.some((item) => findIfIsCurrent(item));
    };

    const isCurrentPage = findIfIsCurrent(entry);

    return [
      entry.label,
      isCurrentPage,
      { ...Astro.props, sidebar: [...entry.entries] },
    ];
  }
);

if (
  !multiSidebarConfig.some(([_label, isCurrentPage, _config]) => isCurrentPage)
) {
  multiSidebarConfig[0][1] = true;
}
---

<starlight-multi-sidebar-select>
  <label>
    <span class="sr-only">
      {Astro.props.labels["menuButton.accessibleLabel"]}
    </span>
    <select>
      {
        multiSidebarConfig.map(([label, isCurrentPage]) => (
          <option value={label} selected={isCurrentPage} set:html={label} />
        ))
      }
    </select>
    <Icon name="down-caret" class="icon caret" />
  </label>
  {
    multiSidebarConfig.map(([label, isCurrentPage, config]) => (
      <div hidden={!isCurrentPage} data-starlight-multi-sidebar-label={label}>
        <Default {...config}>
          <slot />
        </Default>
      </div>
    ))
  }
</starlight-multi-sidebar-select>

<script>
  class StarlightMultiSidebarSelect extends HTMLElement {
    constructor() {
      super();
      const dataLabelName = "starlight-multi-sidebar-label";
      const select = this.querySelector("select");
      if (select) {
        select.addEventListener("change", (e) => {
          if (e.currentTarget instanceof HTMLSelectElement) {
            const sidebarEntries = this.querySelectorAll(
              `[data-${dataLabelName}]`
            );
            sidebarEntries.forEach((entry) => {
              if (entry instanceof HTMLDivElement) {
                entry.hidden = true;
                if (entry.dataset[dataLabelName] === select.value) {
                  entry.hidden = false;
                }
              }
            });
          }
        });
      }
    }
  }
  customElements.define(
    "starlight-multi-sidebar-select",
    StarlightMultiSidebarSelect
  );
</script>
<style>
  label {
    --sl-label-icon-size: 0.875rem;
    --sl-caret-size: 1.25rem;
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--sl-color-gray-1);
  }

  label:hover {
    color: var(--sl-color-gray-2);
  }

  .icon {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
  }

  .label-icon {
    font-size: var(--sl-label-icon-size);
    inset-inline-start: 0;
  }

  .caret {
    font-size: var(--sl-caret-size);
    inset-inline-end: 0;
  }
  select {
    border: 0;
    padding-block: 0.625rem;
    padding-inline: calc(var(--sl-label-icon-size) + 0.25rem)
      calc(var(--sl-caret-size) + 0.25rem);
    width: var(--sl-sidebar-width);
    background-color: transparent;
    text-overflow: ellipsis;
    color: inherit;
    cursor: pointer;
    appearance: none;
  }
  option {
    background-color: var(--sl-color-bg-nav);
    color: var(--sl-color-gray-1);
  }

  @media (min-width: 50rem) {
    select {
      font-size: var(--sl-text-sm);
    }
  }
</style>
